name: Builds
on:
  push:
    branches:
      - beta
      - dev
      - main
      - master
      - stable
  pull_request:
    branches:
      - beta
      - dev
      - main
      - master
      - stable
jobs:
  Linux_x86-64:
    runs-on: ubuntu-18.04
    env:
      UPLOAD_ENABLED: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Log environment
        run: env

      - name: Install additional tools
        run: sudo apt install dos2unix gettext

      # When pyinstaller collects libraries, it seems to ignore libraries that
      # are not found on the host. Example: Qt depends on
      # libxkbcommon-x11.so.0 which is not bundled unless explicitly installed
      # first So we install some dependencies here.

      - name: Install library dependencies
        run: >-
          sudo apt install libxcb-glx0 libxcb-icccm4 libxcb-image0
          libxcb-keysyms1 libxcb-randr0 libxcb-render0 libxcb-render-util0
          libxcb-shape0 libxcb-shm0 libxcb-sync1 libxcb-util1 libxcb-xfixes0
          libxcb-xinerama0 libxcb-xkb1 libxkbcommon-x11-0

      - name: Debug list libraries
        run: ls /usr/lib/x86_64-linux-gnu

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install pip and pipenv
        run: python -m pip install pip==22.2.2 pipenv==2022.8.5

      - name: Run pipenv sync --dev
        run: pipenv sync --dev

      - name: Download pyinstaller source
        run: |
          wget https://github.com/pyinstaller/pyinstaller/releases/download/v4.2/PyInstaller-4.2.tar.gz
          echo "f5c0eeb2aa663cce9a5404292c0195011fa500a6501c873a466b2e8cad3c950c *PyInstaller-4.2.tar.gz" > SHA256SUMS
          shasum -c SHA256SUMS
          tar xf PyInstaller-4.2.tar.gz

      - name: Compile new bootloader for pyinstaller
        run: |
          cd pyinstaller-4.2/bootloader
          CC="gcc -no-pie" ./waf all

      - name: Replace pyinstaller with custom version
        run: |
          pipenv uninstall pyinstaller
          pipenv install `pwd`/pyinstaller-4.2

      - name: Update version
        run: fsbuild/version --update

      - name: Bootstrap
        if: hashFiles('fsbuild/bootstrap') != ''
        run: fsbuild/bootstrap

      - name: Configure
        if: hashFiles('fsbuild/configure') != ''
        run: fsbuild/configure

      - name: Build
        run: pipenv run fsbuild/build

      - name: Bundle
        run: pipenv run fsbuild/bundle

      - name: Archive
        run: fsbuild/archive

      - uses: actions/upload-artifact@v2
        with:
          name: Linux_x86-64
          path: fsbuild/_dist/*

      - name: Upload build to Dropbox folder
        if: >-
          env.UPLOAD_ENABLED != null && (
            github.ref == 'refs/heads/beta' ||
            github.ref == 'refs/heads/dev' ||
            github.ref == 'refs/heads/main' ||
            github.ref == 'refs/heads/master' ||
            github.ref == 'refs/heads/stable'
          )
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
        run: |
          python3 -m pip install dropbox==11.33.0
          fsbuild/upload

  macOS_x86-64:
    runs-on: macos-11
    env:
      SIGNING_ENABLED: ${{ secrets.MACOS_CERTIFICATE_P12_DATA }}
      UPLOAD_ENABLED: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install brew packages
        run: brew install dos2unix

      - name: Check Python version
        run: |
          which python3
          python3 --version
          which python3.9
          python3.9 --version

      - name: Download Python
        run: |
          wget https://www.python.org/ftp/python/3.9.13/python-3.9.13-macosx10.9.pkg
          echo "167c4e2d9f172a617ba6f3b08783cf376dec429386378066eb2f865c98030dd7 *python-3.9.13-macosx10.9.pkg" > SHA256SUMS
          shasum -c SHA256SUMS

      - name: Install Python
        run: sudo installer -pkg python-3.9.13-macosx10.9.pkg -target /

      - name: Add Python to PATH
        run:
          echo /Library/Frameworks/Python.framework/Versions/3.9/bin >>
          $GITHUB_PATH

      - name: Install pip and pipenv
        run: python3 -m pip install pip==22.2.2 pipenv==2022.8.5

      - name: Install appdmg
        run: npm install -g appdmg

      - name: Run pipenv sync --dev
        run: pipenv sync --dev

      - name: Update version
        run: fsbuild/version --update

      - name: Bootstrap
        if: hashFiles('fsbuild/bootstrap') != ''
        run: fsbuild/bootstrap

      - name: Configure
        if: hashFiles('fsbuild/configure') != ''
        run: fsbuild/configure

      - name: Build
        run: pipenv run fsbuild/build

      - name: Bundle
        run: fsbuild/bundle

      - name: Prepare signing certificate
        if: env.SIGNING_ENABLED != null
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          SIGNING_CERTIFICATE_P12_DATA:
            ${{ secrets.MACOS_CERTIFICATE_P12_DATA }}
          SIGNING_CERTIFICATE_PASSWORD:
            ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        run: |
          echo $SIGNING_CERTIFICATE_P12_DATA | base64 --decode > certificate.p12
          security create-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security import certificate.p12 -k build.keychain -P $SIGNING_CERTIFICATE_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASSWORD build.keychain

      - name: Sign
        run: fsbuild/sign

      - name: Notarize
        run: fsbuild/notarize
        env:
          NOTARIZATION_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_PASSWORD }}
          NOTARIZATION_PROVIDER: ${{ secrets.MACOS_NOTARIZATION_PROVIDER }}
          NOTARIZATION_USERNAME: ${{ secrets.MACOS_NOTARIZATION_USERNAME }}

      - name: Archive
        run: fsbuild/archive

      - name: Build DMG
        if: hashFiles('fsbuild/build-dmg') != '' && env.SIGNING_ENABLED != null
        run: fsbuild/build-dmg

      - name: Unlock keychain again
        if: env.SIGNING_ENABLED != null
        run: |
          echo $SIGNING_CERTIFICATE_P12_DATA | base64 --decode > certificate.p12
          security unlock-keychain -p $KEYCHAIN_PASSWORD build.keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          SIGNING_CERTIFICATE_P12_DATA:
            ${{ secrets.MACOS_CERTIFICATE_P12_DATA }}
          SIGNING_CERTIFICATE_PASSWORD:
            ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}

      - name: Sign DMG
        if: hashFiles('fsbuild/sign-dmg') != '' && env.SIGNING_ENABLED != null
        run: fsbuild/sign-dmg

      - name: Notarize DMG
        if:
          hashFiles('fsbuild/notarize-dmg') != '' && env.SIGNING_ENABLED !=
          null
        env:
          NOTARIZATION_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_PASSWORD }}
          NOTARIZATION_PROVIDER: ${{ secrets.MACOS_NOTARIZATION_PROVIDER }}
          NOTARIZATION_USERNAME: ${{ secrets.MACOS_NOTARIZATION_USERNAME }}
        run: fsbuild/notarize-dmg

      - uses: actions/upload-artifact@v2
        with:
          name: macOS_x86-64
          path: fsbuild/_dist/*

      - name: Upload build to Dropbox folder
        if: >-
          env.UPLOAD_ENABLED != null && (
            github.ref == 'refs/heads/beta' ||
            github.ref == 'refs/heads/dev' ||
            github.ref == 'refs/heads/main' ||
            github.ref == 'refs/heads/master' ||
            github.ref == 'refs/heads/stable'
          )
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
        run: |
          python3 -m pip install dropbox==11.23.0
          fsbuild/upload

  Windows_x86-64:
    runs-on: windows-2019
    env:
      UPLOAD_ENABLED: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: msys2/setup-msys2@v2
        with:
          install: >-
            make dos2unix tar zip
          path-type: inherit
          update: true

      - name: Download Python
        run: |
          wget https://www.python.org/ftp/python/3.8.10/python-3.8.10-amd64.exe
          echo "7628244cb53408b50639d2c1287c659f4e29d3dfdb9084b11aed5870c0c6a48a *python-3.8.10-amd64.exe" > SHA256SUMS
          sha256sum -c SHA256SUMS

      - name: Install Python
        shell: cmd
        run: START /WAIT python-3.8.10-amd64.exe /install /quiet PrependPath=1

      - name: Add Python to PATH
        run: |
          export PYTHONDIR=$LOCALAPPDATA/Programs/Python/Python38
          cp $PYTHONDIR/python.exe $PYTHONDIR/python3.exe
          echo $PYTHONDIR/Scripts >> $GITHUB_PATH
          echo $PYTHONDIR >> $GITHUB_PATH

      - name: Install pip and pipenv
        run: python3 -m pip install pip==22.2.2 pipenv==2022.8.5

      - name: Run pipenv sync --dev
        run: pipenv sync --dev --python 3.8

      - name: Create python3 alias in virtualenv
        run:
          pipenv run bash -c 'cp $VIRTUAL_ENV/Scripts/python.exe
          $VIRTUAL_ENV/Scripts/python3.exe'

      - name: Update version
        run: fsbuild/version

      - name: Bootstrap
        if: hashFiles('fsbuild/bootstrap') != ''
        run: fsbuild/bootstrap

      - name: Configure
        if: hashFiles('fsbuild/configure') != ''
        run: fsbuild/configure

      - name: Build
        run: pipenv run bash -c 'fsbuild/build'

      - name: Bundle
        run: fsbuild/bundle

      - name: Archive
        run: fsbuild/archive

      - uses: actions/upload-artifact@v2
        with:
          name: Windows_x86-64
          path: fsbuild/_dist/*

      - name: Upload build to Dropbox folder
        if: >-
          env.UPLOAD_ENABLED != null && (
            github.ref == 'refs/heads/beta' ||
            github.ref == 'refs/heads/dev' ||
            github.ref == 'refs/heads/main' ||
            github.ref == 'refs/heads/master' ||
            github.ref == 'refs/heads/stable'
          )
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
        run: |
          python3 -m pip install dropbox==11.33.0
          fsbuild/upload
